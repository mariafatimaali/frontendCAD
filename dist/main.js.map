{"version":3,"sources":["./src/$_lazy_route_resource lazy namespace object","./src/app/_services/branches/branches.service.ts","./src/app/_services/cplogbookApproved/cplogbook-Approved.service.ts","./src/app/_services/cplogbookDraft/cplogbook-draft.service.ts","./src/app/_services/customerDemographic/customer-demographic.service.ts","./src/app/_services/defanddeferral/defand-deferral.service.ts","./src/app/_services/logBookDraft/logBookDraft.service.ts","./src/app/_services/pledgejoint/pledge-joint.service.ts","./src/app/_services/roles/roles-service.service.ts","./src/app/_services/sbpWaiver/sbp-Waiver.service.ts","./src/app/_services/stockInspection/stock-Inspection.service.ts","./src/app/_services/stockReport/stockReport.service.ts","./src/app/_services/vendorManagement/vendorManagement.service.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/services/rest.service.ts","./src/app/shared/guard/auth.guard.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport { importType } from '@angular/compiler/src/output/output_ast';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { branches } from '../../_models/branches.model';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class BranchService {\n  apiURL = 'http://localhost:3000/branch';\n // apiURL='http://172.18.7.29:3000/branch';\n  branchdata: any;\n  constructor(private http: HttpClient) { }\n  static ngInjectableDef = undefined;\n  /*========================================\n     CRUD Methods for consuming RESTful API\n   =========================================*/\n\n  // Http Options\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }\n\n  // HttpClient API post() method => Create customerDemorgaphics\n  createCustomerDemorgaphics(branches): Observable<branches> {\n    console.log(JSON.stringify(branches));\n    return this.http.post<branches>(this.apiURL, JSON.stringify(branches), this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  // HttpClient API get() method => Fetch cplogbookDraft list\n  getCustomerDemographics(): Observable<branches> {\n    return this.http.get<branches>(this.apiURL)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  // HttpClient API get() single data method => Fetch employee\n  getCustomerDemographic(primeNumber): Observable<branches> {\n    return this.http.get<branches>(this.apiURL + '/' + primeNumber)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n\n  setCustomerDemographicData(data) {\n    return this.branchdata = data;\n  }\n  getCustomerDemographicData() {\n    return this.branchdata;\n  }\n\n  // HttpClient API put() method => Update employee\n  updateCustomerDemorgaphics(BranchCode,branches): Observable<branches> {\n    console.log('updateCustomerDemographic() called');\n    return this.http.put<branches>(this.apiURL + '/' + branches.BranchCode, JSON.stringify(branches), this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  deleteCustomersdemographic(BranchCode){\n    return this.http.delete<branches>(this.apiURL + '/employees/' + BranchCode, this.httpOptions)\n    .pipe(\n      retry(1),\n      catchError(this.handleError)\n    )\n  }\n\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(errorMessage);\n  };\n}","import { Injectable } from '@angular/core';\nimport { importType } from '@angular/compiler/src/output/output_ast';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { cplogbookApproved } from '../../_models/cplogbookApproved.model';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class CplogbookApprovedService {\n //apiURL = 'http://localhost:3000/cplogbook';\n apiURL='http://172.18.7.29:3000/cplogbook';\n apiurl='http://172.18.7.29:3000/cplogbookabc';\n  cplogbookApproveddata: any;\n  constructor(private http: HttpClient) { }\n  static ngInjectableDef = undefined;\n  /*========================================\n     CRUD Methods for consuming RESTful API\n   =========================================*/\n\n  // Http Options\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }\n\n  // HttpClient API post() method => Create customerDemorgaphics\n  createCplogbookApproved(cplogbookApproved): Observable<cplogbookApproved> {\n    console.log(JSON.stringify(cplogbookApproved));\n    return this.http.post<cplogbookApproved>(this.apiURL, JSON.stringify(cplogbookApproved), this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  // HttpClient API get() method => Fetch customerDemorgaphics list\n  getCplogbookApproveds(): Observable<cplogbookApproved> {\n    return this.http.get<cplogbookApproved>(this.apiURL)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  // HttpClient API get() single data method => Fetch employee\n  getCplogbookApproved(primenumber): Observable<cplogbookApproved> {\n    return this.http.get<cplogbookApproved>(this.apiURL + '/' + primenumber)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n\n  setCplogbookApprovedData(data) {\n    return this.cplogbookApproveddata = data;\n  }\n  getCplogbookApprovedData() {\n    return this.cplogbookApproveddata;\n  }\n\n  // HttpClient API put() method => Update employee\n  updateCplogbookApproved(primenumber,cplogbookApproved): Observable<cplogbookApproved> {\n    console.log('updateCustomerDemographic() called');\n    return this.http.put<cplogbookApproved>(this.apiURL + '/' + cplogbookApproved.primenumber, JSON.stringify(cplogbookApproved), this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n \n  deleteCplogbookApproved(primenumber){\n    return this.http.delete<cplogbookApproved>(this.apiURL + '/' + primenumber, this.httpOptions)\n    .pipe(\n      retry(1),\n      catchError(this.handleError)\n    )\n  }\n\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(errorMessage);\n  };\n\n\n\n\n  findOneCustomerDemographics(primeNumber){\n    // console.log (JSON.stringify(primeNumber))\n    console.log(primeNumber)\n    const data = {\"primeNumber\": primeNumber};\n \n     return this.http.post(this.apiurl, data)\n     \n       .pipe(\n         retry(1),\n         catchError(this.handleError)\n       )\n     };\n \n}","import { Injectable } from '@angular/core';\nimport { importType } from '@angular/compiler/src/output/output_ast';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { cplogbookDraft } from '../../_models/cplogbookDraft.model';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class CplogbookDraftService {\n//apiURL = 'http://localhost:3000/cpConditionMonitoring';\n   apiURL='http://172.18.7.29:3000/cpConditionMonitoring';\n   //apiurl ='http://172.18.7.29:3000/cpConditionMonitoringi';\n  cplogbookDraftdata: any;\n  constructor(private http: HttpClient) { }\n  static ngInjectableDef = undefined;\n  /*========================================\n     CRUD Methods for consuming RESTful API\n   =========================================*/\n\n  // Http Options\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }\n\n  // HttpClient API post() method => Create customerDemorgaphics\n  createCustomerDemorgaphics(cplogbookDraft): Observable<cplogbookDraft> {\n    console.log(\"addfunction called\")\n    return this.http.post<cplogbookDraft>(this.apiURL, JSON.stringify(cplogbookDraft), this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  // HttpClient API get() method => Fetch cplogbookDraft list\n  getCustomerDemographics(): Observable<cplogbookDraft> {\n    return this.http.get<cplogbookDraft>(this.apiURL)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  // HttpClient API get() single data method => Fetch employee\n  getCustomerDemographic(primeNumber): Observable<cplogbookDraft> {\n    return this.http.get<cplogbookDraft>(this.apiURL + '/' + primeNumber)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n\n  setCustomerDemographicData(data) {\n    return this.cplogbookDraftdata = data;\n  }\n  getCustomerDemographicData() {\n    return this.cplogbookDraftdata;\n  }\n\n  // HttpClient API put() method => Update employee\n  updateCustomerDemorgaphics(primeNumber,cplogbookDraft): Observable<cplogbookDraft> {\n    console.log('updateCustomerDemographic() called');\n    return this.http.put<cplogbookDraft>(this.apiURL + '/' + cplogbookDraft.primeNumber, JSON.stringify(cplogbookDraft), this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  deleteCustomersdemographic(primeNumber){\n    var p_json = '{\"primeNumber\":\"'+ primeNumber + '\"}';\n    console.log(JSON.stringify(primeNumber));\n    return this.http.put<cplogbookDraft>(this.apiURL , p_json, this.httpOptions)\n    .pipe(\n      retry(1),\n      catchError(this.handleError)\n    )\n  }\n\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(errorMessage);\n  };\n}","import { Injectable } from '@angular/core';\nimport { importType } from '@angular/compiler/src/output/output_ast';\nimport { HttpClient, HttpHeaders ,HttpParams } from '@angular/common/http';\nimport { customerDemorgaphics } from '../../_models/customerDemographics.model';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class CustomerDemographicService {\n// apiURL = 'http://localhost:3000/customerDemographic';\n apiURL='http://172.18.7.29:3000/customerDemographic';\n apiurl='http://172.18.7.29:3000/customerDemographicabc';\n  customerDemographicdata: any;\n  constructor(private http: HttpClient) { }\n  static ngInjectableDef = undefined;\n  /*========================================\n     CRUD Methods for consuming RESTful API\n   =========================================*/\n  \n// Http Options\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }\n \n  \n  // HttpClient API post() method => Create customerDemorgaphics\n  createCustomerDemorgaphics(customerDemorgaphics): Observable<customerDemorgaphics> {\n    console.log(JSON.stringify(customerDemorgaphics));\n    return this.http.post<customerDemorgaphics>(this.apiURL, JSON.stringify(customerDemorgaphics), this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  // HttpClient API get() method => Fetch customerDemorgaphics list\n  getCustomerDemographics(): Observable<customerDemorgaphics> {\n    return this.http.get<customerDemorgaphics>(this.apiURL)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n  findOneCustomerDemographics(primeNumber){\n   // console.log (JSON.stringify(primeNumber))\n   console.log(primeNumber)\n   const data = {\"primeNumber\": primeNumber};\n\n    return this.http.post(this.apiurl, data)\n    \n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n    };\n\n   \n\n  // HttpClient API get() single data method => Fetch employee\n  getCustomerDemographic(primenumber): Observable<customerDemorgaphics> {\n    return this.http.get<customerDemorgaphics>(this.apiURL + '/' + primenumber)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n\n  setCustomerDemographicData(data) {\n    return this.customerDemographicdata = data;\n  }\n  getCustomerDemographicData() {\n    return this.customerDemographicdata;\n  }\n\n  // HttpClient API put() method => Update employee\n  updateCustomerDemorgaphics(primenumber,customerDemorgaphics): Observable<customerDemorgaphics> {\n    console.log('updateCustomerDemographic() called');\n    return this.http.put<customerDemorgaphics>(this.apiURL + '/' + customerDemorgaphics.primenumber, JSON.stringify(customerDemorgaphics), this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  deleteCustomersdemographic(primenumber){\n    return this.http.put<customerDemorgaphics>(this.apiURL, this.httpOptions)\n    .pipe(\n      retry(1),\n      catchError(this.handleError)\n    )\n  }\n\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(errorMessage);\n  };\n}","import { Injectable } from '@angular/core';\nimport { importType } from '@angular/compiler/src/output/output_ast';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { defanddeferral } from '../../_models/defanddeferral.model';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class DefandDeferralService {\n  //apiURL = 'http://localhost:3000/defanddeferral';\n  apiURL='http://172.18.7.29:3000/defanddeferral';\n  defanddeferraldata: any;\n  constructor(private http: HttpClient) { }\n  static ngInjectableDef = undefined;\n  /*========================================\n     CRUD Methods for consuming RESTful API\n   =========================================*/\n\n  // Http Options\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }\n\n  // HttpClient API post() method => Create customerDemorgaphics\n  createCustomerDemorgaphics(defanddeferral): Observable<defanddeferral> {\n    console.log(JSON.stringify(defanddeferral));\n    return this.http.post<defanddeferral>(this.apiURL, JSON.stringify(defanddeferral), this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  // HttpClient API get() method => Fetch customerDemorgaphics list\n  getCustomerDemographics(): Observable<defanddeferral> {\n    return this.http.get<defanddeferral>(this.apiURL)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  // HttpClient API get() single data method => Fetch employee\n  getCustomerDemographic(primeNumber): Observable<defanddeferral> {\n    return this.http.get<defanddeferral>(this.apiURL + '/' + primeNumber)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n\n  setCustomerDemographicData(data) {\n    return this.defanddeferraldata = data;\n  }\n  getCustomerDemographicData() {\n    return this.defanddeferraldata;\n  }\n\n  // HttpClient API put() method => Update employee\n  updateCustomerDemorgaphics(primeNumber,defanddeferral): Observable<defanddeferral> {\n    console.log('updateCustomerDemographic() called');\n    return this.http.put<defanddeferral>(this.apiURL + '/' + defanddeferral.primeNumber, JSON.stringify(defanddeferral), this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  // deleteCustomersdemographic(primeNumber){\n  //   var p_json = '{\"primeNumber\":\"'+ primeNumber + '\"}';\n  //   console.log(JSON.stringify(primeNumber));\n  //   return this.http.delete<defanddeferral>(this.apiURL , p_json)\n  //   .pipe(\n  //     retry(1),\n  //     catchError(this.handleError)\n  //   )\n  // }\n  deleteCustomersdemographic(primenumber){\n    return this.http.delete<defanddeferral>(this.apiURL + '/employees/' + primenumber, this.httpOptions)\n    .pipe(\n      retry(1),\n      catchError(this.handleError)\n    )\n  }\n\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(errorMessage);\n  };\n}","import { Injectable } from '@angular/core';\nimport { importType } from '@angular/compiler/src/output/output_ast';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { logBookDraft } from '../../_models/logbookDraft.model';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class logBookDraftService {\n  //apiURL = 'http://localhost:3000/cplogbookdraft';\n  apiURL='http://172.18.7.29:3000/cplogbookdraft';\n  logBookDraftdata: any;\n  constructor(private http: HttpClient) { }\n  static ngInjectableDef = undefined;\n  /*========================================\n     CRUD Methods for consuming RESTful API\n   =========================================*/\n\n  // Http Options\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }\n\n  // HttpClient API post() method => Create customerDemorgaphics\n  createlogbookdrafts(logbookdraft): Observable<logBookDraft> {\n    console.log(JSON.stringify(logbookdraft));\n    return this.http.post<logBookDraft>(this.apiURL, JSON.stringify(logbookdraft), this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  // HttpClient API get() method => Fetch customerDemorgaphics list\n  getlogBookDrafts(): Observable<logBookDraft> {\n    return this.http.get<logBookDraft>(this.apiURL)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  // HttpClient API get() single data method => Fetch employee\n  getlogBookDraft(primenumber): Observable<logBookDraft> {\n    return this.http.get<logBookDraft>(this.apiURL + '/' + primenumber)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n\n  setlogBookDraft(data) {\n    return this.logBookDraftdata = data;\n  }\n  getlogBookDraftData() {\n    return this.logBookDraftdata;\n  }\n\n  // HttpClient API put() method => Update employee\n  updatelogBookDrafts(primenumber,logBookDrafts): Observable<logBookDraft> {\n    console.log('updateCustomerDemographic() called');\n    return this.http.put<logBookDraft>(this.apiURL + '/' + logBookDrafts.primenumber, JSON.stringify(logBookDrafts), this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  deletelogBookDraft(primenumber){\n  console.log(primenumber);\n    return this.http.delete<logBookDraft>(this.apiURL + '/' + primenumber, this.httpOptions)\n    .pipe(\n      retry(1),\n      catchError(this.handleError)\n    )\n  }\n\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(errorMessage);\n  };\n}","import { Injectable } from '@angular/core';\nimport { importType } from '@angular/compiler/src/output/output_ast';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { pledgejoint } from '../../_models/pledgejoint.model';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class pledgejointService {\n  //apiURL = 'http://localhost:3000/pledgejointstockInspectionTickler';\n  apiURL='http://172.18.7.29:3000/pledgejointstockInspectionTickler';\n  pledgejointdata: any;\n  constructor(private http: HttpClient) { }\n  static ngInjectableDef = undefined;\n  /*========================================\n     CRUD Methods for consuming RESTful API\n   =========================================*/\n\n  // Http Options\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }\n\n  // HttpClient API post() method => Create customerDemorgaphics\n  createCustomerDemorgaphics(pledgejoint): Observable<pledgejoint> {\n    console.log(JSON.stringify(pledgejoint));\n    return this.http.post<pledgejoint>(this.apiURL, JSON.stringify(pledgejoint), this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  // HttpClient API get() method => Fetch customerDemorgaphics list\n  getCustomerDemographics(): Observable<pledgejoint> {\n    return this.http.get<pledgejoint>(this.apiURL)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  // HttpClient API get() single data method => Fetch employee\n  getCustomerDemographic(primeNumber): Observable<pledgejoint> {\n    return this.http.get<pledgejoint>(this.apiURL + '/' + primeNumber)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n\n  setCustomerDemographicData(data) {\n    return this.pledgejointdata = data;\n  }\n  getCustomerDemographicData() {\n    return this.pledgejointdata;\n  }\n\n  // HttpClient API put() method => Update employee\n  updateCustomerDemorgaphics(primeNumber,pledgejoint): Observable<pledgejoint> {\n    console.log('updateCustomerDemographic() called');\n    return this.http.put<pledgejoint>(this.apiURL + '/' + pledgejoint.primeNumber, JSON.stringify(pledgejoint), this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  deleteCustomersdemographic(primeNumber){\n    var p_json = '{\"primeNumber\":\"'+ primeNumber + '\"}';\n    console.log(JSON.stringify(primeNumber));\n    return this.http.put<pledgejoint>(this.apiURL , p_json, this.httpOptions)\n    .pipe(\n      retry(1),\n      catchError(this.handleError)\n    )\n  }\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(errorMessage);\n  };\n}","import { Injectable } from '@angular/core';\nimport { importType } from '@angular/compiler/src/output/output_ast';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { roles } from '../../_models/roles.model';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class RoleService {\n  //apiURL = 'http://localhost:3000/user';\n deleteURL= 'http://172.18.7.29:3000/maria';\n  //deleteURL= 'http://localhost:3000/maria';\n  apiURL='http://172.18.7.29:3000/user';\n  constructor(private http: HttpClient) { }\n  static ngInjectableDef = undefined;\n  /*========================================\n     CRUD Methods for consuming RESTful API\n   =========================================*/\n\n  // Http Options\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }\n\n  // HttpClient API post() method => Create customerDemorgaphics\n  createUser(roles): Observable<roles> {\n    console.log(JSON.stringify(roles));\n    return this.http.post<roles>(this.apiURL, JSON.stringify(roles), this.httpOptions)\n      .pipe(\n         retry(1),\n      //   catchError(this.handleError)\n      )\n  };\n\n\n  \n\n   // HttpClient API get() method => Fetch Roles list\n  getRoles(): Observable<roles[]> {\n    return this.http.get<roles[]>(this.apiURL)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  // deleteRoles(userid): Observable<roles[]> {\n  //   console.log('Delete called', userid);\n  //   return this.http.put<roles[]>(this.deleteURL, userid, this.httpOptions)\n  //     .pipe(\n  //       retry(1),\n  //       catchError(this.handleError)\n  //     );\n  // }\n\n  deleteRoles(userid) {\n    console.log('Delete called', userid);\n    var Userid = JSON.stringify\n    return this.http.delete(this.deleteURL, userid)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      );\n  }\n\n  updateRoles(userid,roles): Observable<roles[]> {\n    console.log('updateCustomerDemographic() called');\n    return this.http.put<roles[]>(this.apiURL, JSON.stringify(roles), this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(errorMessage);\n  };\n}","import { Injectable } from '@angular/core';\nimport { importType } from '@angular/compiler/src/output/output_ast';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { sbpWaiver } from '../../_models/sbpWaiver.model';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class sbpWaiverService {\n  //apiURL = 'http://localhost:3000/sbpWaiver';\n  url='http://localhost:3000/v1/wsdl/encryptQuery/';\n apiURL='http://172.18.7.29:3000/sbpWaiver';\n  sbpWaiverdata: any;\n  constructor(private http: HttpClient) { }\n  static ngInjectableDef = undefined;\n  /*========================================\n     CRUD Methods for consuming RESTful API\n   =========================================*/\n\n  // Http Options\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }\n\n  // HttpClient API post() method => Create customerDemorgaphics\n  createCustomerDemorgaphics(sbpWaiver): Observable<sbpWaiver> {\n    console.log(JSON.stringify(sbpWaiver));\n    return this.http.post<sbpWaiver>(this.apiURL, JSON.stringify(sbpWaiver), this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n  //doc service\n  // docservice(sbpWaiver): Observable<sbpWaiver> {\n  //   console.log(JSON.stringify(sbpWaiver));\n  //   return this.http.post<sbpWaiver>(this.url, JSON.stringify(sbpWaiver), this.httpOptions)\n  //     .pipe(\n  //       retry(1),\n  //       catchError(this.handleError)\n  //     )\n  // };\n  // post(relativePath: string, model: any): Observable<object> {\n  //   //this.loaderService.show();\n  //   // let headers = new HttpHeaders();\n  //   // headers = headers.set('Content-Type', 'application/json');\n \n  //   return this.httpClient.post(this.url + relativePath, model, {\n  //   //  headers: headers\n  //   }).pipe(\n  //     tap(data => {\n  //       //this.loaderService.hide(); \n  //     })\n  //   );\n  // }\n\n  // HttpClient API get() method => Fetch customerDemorgaphics list\n  getCustomerDemographics(): Observable<sbpWaiver> {\n    return this.http.get<sbpWaiver>(this.apiURL)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  // HttpClient API get() single data method => Fetch employee\n  // getCustomerDemographic(primeNumber): Observable<sbpWaiver> {\n  //   console.log(\"this called.............\")\n  //   console.log(primeNumber)\n  //   return this.http.get<sbpWaiver>(this.apiURL + '/' +primeNumber)\n  //     .pipe(\n  //       retry(1),\n  //       catchError(this.handleError)\n  //     )\n  // };\n\n    // HttpClient API get() single data method => Fetch employee\n    getCustomerDemographic(primeNumber): Observable<sbpWaiver> {\n      return this.http.get<sbpWaiver>(this.apiURL + '/' + primeNumber)\n        .pipe(\n          retry(1),\n          catchError(this.handleError)\n        )\n    };\n  \n    // HttpClient API get() single data method => Fetch employee\n    getCustomerDemographicc(primeNumber){\n      console.log(\"this called.............\")\n      console.log(primeNumber)\n      return this.http.get<sbpWaiver>(this.apiURL + '/' +':'+primeNumber)\n        .pipe(\n          retry(1),\n          catchError(this.handleError)\n        )\n    };\n  \n\n  setCustomerDemographicData(data) {\n    return this.sbpWaiverdata = data;\n  }\n  getCustomerDemographicData() {\n    return this.sbpWaiverdata;\n  }\n\n  // HttpClient API put() method => Update employee\n  updateCustomerDemorgaphics(primeNumber,sbpWaiver): Observable<sbpWaiver> {\n    console.log('updateCustomerDemographic() called');\n    return this.http.put<sbpWaiver>(this.apiURL + '/' + sbpWaiver.primeNumber, JSON.stringify(sbpWaiver), this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  deleteCustomersdemographic(primeNumber){\n    var p_json = '{\"primeNumber\":\"'+ primeNumber + '\"}';\n    console.log(JSON.stringify(primeNumber));\n    return this.http.put<sbpWaiver>(this.apiURL , p_json, this.httpOptions)\n    .pipe(\n      retry(1),\n      catchError(this.handleError)\n    )\n  }\n\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(errorMessage);\n  };\n}","import { Injectable } from '@angular/core';\nimport { importType } from '@angular/compiler/src/output/output_ast';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { stockInspection } from '../../_models/stockInspection.model';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class stockInspectionService {\n  //apiURL = 'http://localhost:3000/stockInspectionTickler';\n  apiURL='http://172.18.7.29:3000/stockInspectionTickler';\n  apiurl='http://172.18.7.29:3000/stockInspectionTicklerabc';\n  stockInspectiondata: any;\n  constructor(private http: HttpClient) { }\n  static ngInjectableDef = undefined;\n  /*========================================\n     CRUD Methods for consuming RESTful API\n   =========================================*/\n\n  // Http Options\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }\n\n  // HttpClient API post() method => Create customerDemorgaphics\n  createCustomerDemorgaphics(stockInspection): Observable<stockInspection> {\n    console.log(JSON.stringify(stockInspection));\n    return this.http.post<stockInspection>(this.apiURL, JSON.stringify(stockInspection), this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  // HttpClient API get() method => Fetch customerDemorgaphics list\n  getCustomerDemographics(): Observable<stockInspection> {\n    return this.http.get<stockInspection>(this.apiURL)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n  findOneCustomerDemographics(primeNumber){\n    // console.log (JSON.stringify(primeNumber))\n    console.log(primeNumber)\n    const data = {\"primeNumber\": primeNumber};\n \n     return this.http.post(this.apiurl, data)\n     \n       .pipe(\n         retry(1),\n         catchError(this.handleError)\n       )\n     };\n \n  // HttpClient API get() single data method => Fetch employee\n  getCustomerDemographic(primeNumber): Observable<stockInspection> {\n    return this.http.get<stockInspection>(this.apiURL + '/' + primeNumber)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n\n  setCustomerDemographicData(data) {\n    return this.stockInspectiondata = data;\n  }\n  getCustomerDemographicData() {\n    return this.stockInspectiondata;\n  }\n\n  // HttpClient API put() method => Update employee\n  updateCustomerDemorgaphics(primeNumber,stockInspection): Observable<stockInspection> {\n    console.log('updateCustomerDemographic() called');\n    return this.http.put<stockInspection>(this.apiURL + '/' + stockInspection.primeNumber, JSON.stringify(stockInspection), this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  deleteCustomersdemographic(primeNumber){\n    var p_json = '{\"primeNumber\":\"'+ primeNumber + '\"}';\n    console.log(JSON.stringify(primeNumber));\n    return this.http.put<stockInspection>(this.apiURL , p_json, this.httpOptions)\n    .pipe(\n      retry(1),\n      catchError(this.handleError)\n    )\n  }\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(errorMessage);\n  };\n}","import { Injectable } from '@angular/core';\nimport { importType } from '@angular/compiler/src/output/output_ast';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { stockReport } from '../../_models/stockReportTickler.model';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class stockReportService {\n  //apiURL = 'http://localhost:3000/stockReportTickler';\n apiURL='http://172.18.7.29:3000/stockReportTickler';\n apiurl='http://172.18.7.29:3000/stockReportTicklerabc';\n  stockReportdata: any;\n  constructor(private http: HttpClient) { }\n  static ngInjectableDef = undefined;\n  /*========================================\n     CRUD Methods for consuming RESTful API\n   =========================================*/\n\n  // Http Options\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }\n\n  // HttpClient API post() method => Create customerDemorgaphics\n  createCustomerDemorgaphics(stockReport): Observable<stockReport> {\n    console.log(JSON.stringify(stockReport));\n    return this.http.post<stockReport>(this.apiURL, JSON.stringify(stockReport), this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  // HttpClient API get() method => Fetch customerDemorgaphics list\n  getCustomerDemographics(): Observable<stockReport> {\n    return this.http.get<stockReport>(this.apiURL)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  // HttpClient API get() single data method => Fetch employee\n  getCustomerDemographic(primeNumber): Observable<stockReport> {\n    return this.http.get<stockReport>(this.apiURL + '/' + primeNumber)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  findOneCustomerDemographics(primeNumber){\n    // console.log (JSON.stringify(primeNumber))\n    console.log(primeNumber)\n    const data = {\"primeNumber\": primeNumber};\n \n     return this.http.post(this.apiurl, data)\n     \n       .pipe(\n         retry(1),\n         catchError(this.handleError)\n       )\n     };\n \n    \n \n  setCustomerDemographicData(data) {\n    return this.stockReportdata = data;\n  }\n  getCustomerDemographicData() {\n    return this.stockReportdata;\n  }\n\n  // HttpClient API put() method => Update employee\n  updateCustomerDemorgaphics(primeNumber,stockReport): Observable<stockReport> {\n    console.log('updateCustomerDemographic() called');\n    return this.http.put<stockReport>(this.apiURL + '/' + stockReport.primeNumber, JSON.stringify(stockReport), this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  deleteCustomersdemographic(primeNumber){\n    var p_json = '{\"primeNumber\":\"'+ primeNumber + '\"}';\n    console.log(JSON.stringify(primeNumber));\n    return this.http.put<stockReport>(this.apiURL , p_json, this.httpOptions)\n    .pipe(\n      retry(1),\n      catchError(this.handleError)\n    )\n  }\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(errorMessage);\n  };\n}","import { Injectable } from '@angular/core';\nimport { importType } from '@angular/compiler/src/output/output_ast';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { vendorManagement } from '../../_models/vendorManagement.model';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class vendorManagementService {\n // apiURL = 'http://localhost:3000/vendorManagment';\n  apiURL='http://172.18.7.29:3000/vendorManagment';\n  vendorManagementdata: any;\n  constructor(private http: HttpClient) { }\n  static ngInjectableDef = undefined;\n  /*========================================\n     CRUD Methods for consuming RESTful API\n   =========================================*/\n\n  // Http Options\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }\n\n  // HttpClient API post() method => Create customerDemorgaphics\n  createCustomerDemorgaphics(vendorManagement): Observable<vendorManagement> {\n    console.log(JSON.stringify(vendorManagement));\n    return this.http.post<vendorManagement>(this.apiURL, JSON.stringify(vendorManagement), this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  // HttpClient API get() method => Fetch customerDemorgaphics list\n  getCustomerDemographics(): Observable<vendorManagement> {\n    return this.http.get<vendorManagement>(this.apiURL)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  // HttpClient API get() single data method => Fetch employee\n  getCustomerDemographic(primeNumber): Observable<vendorManagement> {\n    return this.http.get<vendorManagement>(this.apiURL + '/' + primeNumber)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n\n  setCustomerDemographicData(data) {\n    return this.vendorManagementdata = data;\n  }\n  getCustomerDemographicData() {\n    return this.vendorManagementdata;\n  }\n\n  // HttpClient API put() method => Update employee\n  updateCustomerDemorgaphics(primeNumber,vendorManagement): Observable<vendorManagement> {\n    console.log('updateCustomerDemographic() called');\n    return this.http.put<vendorManagement>(this.apiURL + '/' + vendorManagement.primeNumber, JSON.stringify(vendorManagement), this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  };\n\n  deleteCustomersdemographic(vendorCategory){\n    var p_json = '{\"vendorCategory\":\"'+ vendorCategory + '\"}';\n    console.log (p_json);\n    console.log(JSON.stringify(vendorCategory));\n    return this.http.put<vendorManagement>(this.apiURL , p_json, this.httpOptions)\n    .pipe(\n      retry(1),\n      catchError(this.handleError)\n    )\n  }\n\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(errorMessage);\n  };\n}","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AuthGuard } from './shared/guard/auth.guard';\n\nconst routes: Routes = [\n    {\n        path: '',\n        loadChildren: () => import('./layout/layout.module').then(m => m.LayoutModule),\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'login',\n        loadChildren: () => import('./login/login.module').then(m => m.LoginModule)\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes,{\n        paramsInheritanceStrategy: 'always'})],\n    exports: [RouterModule],\n    providers: [AuthGuard]\n})\nexport class AppRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n    constructor(private translate: TranslateService) {\n        translate.setDefaultLang('en');\n    }\n\n    ngOnInit() {\n    }\n}\n","<router-outlet></router-outlet>","import { LayoutModule } from '@angular/cdk/layout';\nimport { RoleService } from \"./_services/roles/roles-service.service\";\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport  {BranchService} from './_services/branches/branches.service';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { CustomerDemographicService } from './_services/customerDemographic/customer-demographic.service';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport {RestService} from './services/rest.service';\nimport { FormsModule ,ReactiveFormsModule} from '@angular/forms';\nimport {CplogbookDraftService} from './_services/cplogbookDraft/cplogbook-draft.service';\nimport {CplogbookApprovedService} from './_services/cplogbookApproved/cplogbook-Approved.service';\nimport { DefandDeferralService } from \"./_services/defanddeferral/defand-deferral.service\";\nimport {logBookDraftService } from './_services/logBookDraft/logBookDraft.service'\nimport { sbpWaiverService } from './_services/sbpWaiver/sbp-Waiver.service';\nimport {pledgejointService} from './_services/pledgejoint/pledge-joint.service';\nimport {vendorManagementService} from './_services/vendorManagement/vendorManagement.service';\nimport { stockReportService } from './_services/stockReport/stockReport.service';\nimport { stockInspectionService } from \"./_services/stockInspection/stock-Inspection.service\";\nexport const createTranslateLoader = (http: HttpClient) => {\n    /* for development\n    return new TranslateHttpLoader(\n        http,\n        '/start-javascript/sb-admin-material/master/dist/assets/i18n/',\n        '.json'\n    );*/\n    return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n};\n\n@NgModule({\n    declarations: [AppComponent],\n    imports: [\n        FormsModule,\n        ReactiveFormsModule,\n        BrowserModule,\n        AppRoutingModule,\n        BrowserAnimationsModule,\n        LayoutModule,\n        OverlayModule,\n        HttpClientModule,\n       \n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: createTranslateLoader,\n                deps: [HttpClient]\n            }\n        })\n    ],\n    providers: [CustomerDemographicService,sbpWaiverService,CplogbookDraftService,RestService,CplogbookApprovedService,DefandDeferralService,logBookDraftService,pledgejointService,vendorManagementService\n        ,stockReportService,stockInspectionService,BranchService,RoleService],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestService {\n  baseUri:string = 'http://172.18.7.29:3000/users';\n  //baseUri:string = 'http://localhost:3000/users';\n  headers = new HttpHeaders().set('Content-Type', 'application/json');\n  roledata : any\n customerDemographicdata: any;\n\n  constructor(private http: HttpClient) { }\n\n  setRoleData(someInput)\n  {\n    this.roledata = someInput;\n  }\n  getRoleData()\n  {\n    console.log(this.roledata);\n  }\n\n\n  // Create\n  createEmployee(data): Observable<any> {\n    let url = `${this.baseUri}/`;\n    return this.http.post(url, data)\n      .pipe(\n        catchError(this.errorMgmt)\n      )\n  }\n\n  setCustomerDemographicData(data) {\n    return this.customerDemographicdata = data;\n  }\n  getCustomerDemographicData() {\n    return this.customerDemographicdata;\n  }\n  // Get all employees\n  getEmployees(): Observable<any> {\n    return this.http.get(`${this.baseUri}`);\n  }\n\n  // Get employee\n  getEmployee(id): Observable<any> {\n    let url = `${this.baseUri}/${id}`;\n    return this.http.get(url, {headers: this.headers}).pipe(\n      map((res: Response) => {\n        return res || {}\n      }),\n      catchError(this.errorMgmt)\n    )\n  }\n\n  // Update employee\n  updateEmployee(id, data): Observable<any> {\n    let url = `${this.baseUri}/${id}`;\n    return this.http.put(url, data, { headers: this.headers }).pipe(\n      catchError(this.errorMgmt)\n    )\n  }\n\n  // Delete employee\n  deleteEmployee(id): Observable<any> {\n    let url = `${this.baseUri}/${id}`;\n    return this.http.delete(url, { headers: this.headers }).pipe(\n      catchError(this.errorMgmt)\n    )\n  }\n\n  // Error handling \n  errorMgmt(error: HttpErrorResponse) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n\n}","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n    constructor(private router: Router) {}\n\n    canActivate() {\n        if (sessionStorage.getItem('isLoggedin')) {\n            return true;\n        }\n\n        this.router.navigate(['/login']);\n        return false;\n    }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}